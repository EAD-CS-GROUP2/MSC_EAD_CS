<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-3.1.xsd">
	
	<!-- Enable the method security to use the 
	     @PreAuthorize, @PreFilter, @PostAuthorize and @PostFilter annotations
	     in methods and secure it.
	-->
	<global-method-security pre-post-annotations="enabled" />
	
	<!-- secure the applicationÂ´s urls with the specific Role --> 
	<http auto-config="false"  use-expressions="true" access-denied-page="/accessdenied">
		<intercept-url pattern="/login" access="permitAll" />
		<intercept-url pattern="/logout" access="permitAll" />
		<intercept-url pattern="/accessdenied" access="permitAll" />
		<intercept-url pattern="/listCampaigns" access="hasAnyRole('ROLE_BACK_OFFICE_STAFF','ROLE_AUTHORIZED_CUSTOMER')" />
		<intercept-url pattern="/listUsers" access="hasRole('ROLE_AUTHORIZED_CUSTOMER')" />
		<intercept-url pattern="/menu" access="hasAnyRole('ROLE_BACK_OFFICE_STAFF','ROLE_AUTHORIZED_CUSTOMER')" />
		
        <form-login login-page="/login" default-target-url="/main" authentication-failure-handler-ref="authenticationFailureHandler"  />
		<logout logout-success-url="/logout" />

	</http>

    <beans:bean id="authenticationFailureHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
        <beans:property name="redirectStrategy" ref="queryStringPropagateRedirectStrategy" />
        <beans:property name="defaultFailureUrl" value="/login" />
    </beans:bean>

    <beans:bean id="queryStringPropagateRedirectStrategy" class="edu.msc.fts.controllers.QueryStringPropagateRedirectStrategy" />

    <!-- Define the application authentication manager to use a custom Class (mongoUserDetailsService)
         to validate the user access, and the password enconding -->
    <authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="mongoUserDetailsServiceImpl">
            <password-encoder ref="encoder" />
		</authentication-provider>
	</authentication-manager>

    <!-- password encoder -->
    <beans:bean name="encoder"
                class="org.springframework.security.crypto.password.StandardPasswordEncoder">
        <beans:constructor-arg name="secret" value="mobile$123"/>
    </beans:bean>


</beans:beans>